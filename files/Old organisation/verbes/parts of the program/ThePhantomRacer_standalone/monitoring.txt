##a->b: 0.01803719313101567
##b->c: 0.0775440644732113
##c->d: 0.7923680738645396
##d->e: 0.08457727400051168
##e->f: 0.014216953516080268
##f->g: 0.004750388631215161
##g->h: 0.01545287565724914
##h->j: 0.0016627215518888998
##j->k: 0.020678816337268535
##k->l: 0.4265509432993835
##l->m: 4.707531641103621
##m->n: 0.8678221897204471
##n->o: 2.3823143390489454
##o->p: 0.1551522771544694
##p->q: 0.4282461666100001
##q->z: 0.0019479672502016251

##    def refresh_display(self):
##        #in replay mode, sort according to length, not z!!!
####        self.objs.sort(key=lambda x:x.from_init.length(), reverse=True)
##        monitor.append("j")
##        self.objs.sort(key=lambda x:x.from_init.z, reverse=True)
##        monitor.append("k")
##        #
####        self.screen.fill((0,0,155))
##        self.screen.blit(self.background, (0,0))
##        self.screen.fill((0,200,0),self.screen_rect)
##        monitor.append("l")
##        #
##        self.track.refresh_and_draw_things(self.cam, self.light)
##        monitor.append("m")
##        for d in self.debris:
##            d.refresh()
##        monitor.append("n")
##        for obj in self.objs:
##            if obj.visible:
##                obj.refresh_and_draw(self.cam, self.light)
##        monitor.append("o")
##        #
##        self.hud.draw()
##        monitor.append("p")
##        if self.start_i >= 0:
##            self.show_start()
##        pygame.display.flip()
##        monitor.append("q")
##
##  def func_time(self):
##        monitor.append("a")
##        self.start_i = -1
##        self.i += 1
##        if self.start_i < 0:
##    ##        if self.i%10 == 0:
##    ##            if self.hero.colliding_with:
##    ##                print(self.hero.colliding_with.id)
##    ##            else:
##    ##                print("rien")
##            self.treat_commands()
##            monitor.append("b")
##            # dynamics
##            self.refresh_opponents()
##            monitor.append("c")
##            self.hero.dyn.refresh()
##            self.move_hero(self.hero.dyn.velocity)
##            monitor.append("d")
##            # collisions
##            self.obstacles_collisions()
##            monitor.append("e")
##            self.vessel_collisions()
##            monitor.append("f")
##            finisher = self.check_finish()
##            monitor.append("g")
##            if finisher:
##                finisher.finished = True
##                self.ranking.append(finisher)
##            # display
##            self.hide_useless_obstacles()
##            monitor.append("h")
##        self.refresh_display()
##        monitor.append("z")
##
##    def monitor(self):
##        monitor.show("abcdefghjklmnopqz")